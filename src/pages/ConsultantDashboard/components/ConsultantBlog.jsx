import React, { useState } from 'react';
import BlogModal from './BlogModal';
import BlogFormModal from './BlogFormModal';
import './ConsultantBlog.css';

const ConsultantBlog = () => {
  const [filter, setFilter] = useState('All');
  const [selectedBlog, setSelectedBlog] = useState(null);
  const [showBlogModal, setShowBlogModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);

  // Mock data cho blogs
  const [blogs, setBlogs] = useState([
    {
      id: 'B001',
      title: 'H∆∞·ªõng d·∫´n chƒÉm s√≥c s·ª©c kh·ªèe sinh s·∫£n',
      major: 'S·ª©c kh·ªèe sinh s·∫£n',
      content:
        'Vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe sinh s·∫£n l√† r·∫•t quan tr·ªçng ƒë·ªëi v·ªõi m·ªçi ng∆∞·ªùi. B√†i vi·∫øt n√†y s·∫Ω h∆∞·ªõng d·∫´n c√°c b·∫°n nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt v·ªÅ chƒÉm s√≥c s·ª©c kh·ªèe sinh s·∫£n m·ªôt c√°ch khoa h·ªçc v√† an to√†n.',
      status: 'verified', // verified, unverified
      images: [
        'https://via.placeholder.com/300x200?text=Health+Care+1',
        'https://via.placeholder.com/300x200?text=Health+Care+2',
      ],
      createdAt: '2024-01-15T10:30:00Z',
      updatedAt: '2024-01-15T10:30:00Z',
      author: sessionStorage.getItem('full_name') || 'T∆∞ v·∫•n vi√™n',
    },
    {
      id: 'B002',
      title: 'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh hi·ªán ƒë·∫°i',
      major: 'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh',
      content:
        'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh l√† m·ªôt quy·∫øt ƒë·ªãnh quan tr·ªçng c·ªßa m·ªói c·∫∑p ƒë√¥i. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p th√¥ng tin v·ªÅ c√°c ph∆∞∆°ng ph√°p k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh hi·ªán ƒë·∫°i v√† an to√†n nh·∫•t.',
      status: 'unverified',
      images: ['https://via.placeholder.com/300x200?text=Family+Planning'],
      createdAt: '2024-01-14T14:20:00Z',
      updatedAt: '2024-01-14T14:20:00Z',
      author: sessionStorage.getItem('full_name') || 'T∆∞ v·∫•n vi√™n',
    },
    {
      id: 'B003',
      title: 'Ph√≤ng ng·ª´a b·ªánh l√¢y nhi·ªÖm qua ƒë∆∞·ªùng t√¨nh d·ª•c',
      major: 'S·ª©c kh·ªèe t√¨nh d·ª•c',
      content:
        'C√°c b·ªánh l√¢y nhi·ªÖm qua ƒë∆∞·ªùng t√¨nh d·ª•c c√≥ th·ªÉ ƒë∆∞·ª£c ph√≤ng ng·ª´a hi·ªáu qu·∫£ n·∫øu ch√∫ng ta c√≥ ki·∫øn th·ª©c v√† bi·ªán ph√°p ph√π h·ª£p. H√£y c√πng t√¨m hi·ªÉu v·ªÅ c√°ch ph√≤ng ng·ª´a c√°c b·ªánh n√†y.',
      status: 'verified',
      images: [
        'https://via.placeholder.com/300x200?text=STD+Prevention+1',
        'https://via.placeholder.com/300x200?text=STD+Prevention+2',
        'https://via.placeholder.com/300x200?text=STD+Prevention+3',
      ],
      createdAt: '2024-01-13T09:15:00Z',
      updatedAt: '2024-01-13T09:15:00Z',
      author: sessionStorage.getItem('full_name') || 'T∆∞ v·∫•n vi√™n',
    },
  ]);

  const majors = [
    'S·ª©c kh·ªèe sinh s·∫£n',
    'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh',
    'S·ª©c kh·ªèe t√¨nh d·ª•c',
    'S·ª©c kh·ªèe ph·ª• khoa',
    'S·ª©c kh·ªèe nam gi·ªõi',
    'Gi√°o d·ª•c gi·ªõi t√≠nh',
  ];

  // Filter blogs based on status
  const filteredBlogs = blogs.filter((blog) => {
    if (filter === 'Verified') {
      return blog.status === 'verified';
    } else if (filter === 'Unverified') {
      return blog.status === 'unverified';
    }
    return true;
  });

  // Handle blog click
  const handleBlogClick = (blog) => {
    setSelectedBlog(blog);
    setShowBlogModal(true);
  };

  // Handle create blog
  const handleCreateBlog = () => {
    setSelectedBlog(null);
    setIsEditing(false);
    setShowCreateModal(true);
  };

  // Handle edit blog
  const handleEditBlog = (blog) => {
    setSelectedBlog(blog);
    setIsEditing(true);
    setShowCreateModal(true);
  };

  // Handle blog submission (create or update)
  const handleBlogSubmit = (blogData) => {
    if (isEditing && selectedBlog) {
      // Update existing blog
      setBlogs((prev) =>
        prev.map((blog) =>
          blog.id === selectedBlog.id
            ? {
                ...blog,
                ...blogData,
                status: 'unverified', // Reset to unverified when updated
                updatedAt: new Date().toISOString(),
              }
            : blog
        )
      );
    } else {
      // Create new blog
      const newBlog = {
        id: `B${String(blogs.length + 1).padStart(3, '0')}`,
        ...blogData,
        status: 'unverified',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        author: sessionStorage.getItem('full_name') || 'T∆∞ v·∫•n vi√™n',
      };
      setBlogs((prev) => [newBlog, ...prev]);
    }
    setShowCreateModal(false);
  };

  // Format date
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return (
      date.toLocaleDateString('vi-VN') +
      ' ' +
      date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    );
  };

  return (
    <div className="consultant-blog">
      <div className="blog-header">
        <h1>Qu·∫£n L√Ω Blog</h1>
        <div className="blog-stats">
          <div className="stat-item">
            <span className="stat-number">
              {blogs.filter((b) => b.status === 'verified').length}
            </span>
            <span className="stat-label">ƒê√£ duy·ªát</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">
              {blogs.filter((b) => b.status === 'unverified').length}
            </span>
            <span className="stat-label">Ch·ªù duy·ªát</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{blogs.length}</span>
            <span className="stat-label">T·ªïng c·ªông</span>
          </div>
        </div>
      </div>

      <div className="blog-controls">
        <div className="blog-filters">
          {['All', 'Verified', 'Unverified'].map((filterOption) => (
            <button
              key={filterOption}
              className={`filter-btn ${filter === filterOption ? 'active' : ''}`}
              onClick={() => setFilter(filterOption)}
            >
              {filterOption === 'All'
                ? 'T·∫•t c·∫£'
                : filterOption === 'Verified'
                  ? 'ƒê√£ duy·ªát'
                  : 'Ch·ªù duy·ªát'}
              <span className="filter-count">
                (
                {filterOption === 'All'
                  ? blogs.length
                  : filterOption === 'Verified'
                    ? blogs.filter((b) => b.status === 'verified').length
                    : blogs.filter((b) => b.status === 'unverified').length}
                )
              </span>
            </button>
          ))}
        </div>
        <button
          className="btn btn-primary create-btn"
          onClick={handleCreateBlog}
        >
          <span>‚ûï</span> T·∫°o Blog M·ªõi
        </button>
      </div>

      <div className="blogs-grid">
        {filteredBlogs.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üìù</div>
            <h3>Kh√¥ng c√≥ blog n√†o</h3>
            <p>
              {filter === 'All'
                ? 'B·∫°n ch∆∞a t·∫°o blog n√†o. H√£y t·∫°o blog ƒë·∫ßu ti√™n c·ªßa b·∫°n!'
                : filter === 'Verified'
                  ? 'Hi·ªán t·∫°i ch∆∞a c√≥ blog n√†o ƒë∆∞·ª£c duy·ªát.'
                  : 'Hi·ªán t·∫°i ch∆∞a c√≥ blog n√†o ƒëang ch·ªù duy·ªát.'}
            </p>
            {filter === 'All' && (
              <button className="btn btn-primary" onClick={handleCreateBlog}>
                <span>‚ûï</span> T·∫°o Blog ƒê·∫ßu Ti√™n
              </button>
            )}
          </div>
        ) : (
          filteredBlogs.map((blog) => (
            <div key={blog.id} className={`blog-card ${blog.status}`}>
              <div className="blog-image">
                {blog.images && blog.images.length > 0 ? (
                  <img src={blog.images[0]} alt={blog.title} />
                ) : (
                  <div className="no-image">
                    <span>üìù</span>
                  </div>
                )}
                <div className={`status-badge status-${blog.status}`}>
                  {blog.status === 'verified' ? 'ƒê√£ duy·ªát' : 'Ch·ªù duy·ªát'}
                </div>
              </div>
              <div className="blog-content">
                <div className="blog-info">
                  <h3 className="blog-title">{blog.title}</h3>
                  <div className="blog-major">
                    <span className="major-tag">{blog.major}</span>
                  </div>
                  <p className="blog-excerpt">
                    {blog.content.substring(0, 150)}...
                  </p>
                  <div className="blog-meta">
                    <span className="blog-date">
                      {formatDate(blog.createdAt)}
                    </span>
                    {blog.updatedAt !== blog.createdAt && (
                      <span className="blog-updated">
                        C·∫≠p nh·∫≠t: {formatDate(blog.updatedAt)}
                      </span>
                    )}
                  </div>
                </div>
                <div className="blog-actions">
                  <button
                    className="btn btn-outline"
                    onClick={() => handleBlogClick(blog)}
                  >
                    üëÅÔ∏è Xem chi ti·∫øt
                  </button>
                  <button
                    className="btn btn-secondary"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleEditBlog(blog);
                    }}
                  >
                    ‚úèÔ∏è Ch·ªânh s·ª≠a
                  </button>
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Blog Detail Modal */}
      {showBlogModal && (
        <BlogModal
          blog={selectedBlog}
          onClose={() => setShowBlogModal(false)}
          onEdit={() => {
            setShowBlogModal(false);
            handleEditBlog(selectedBlog);
          }}
        />
      )}

      {/* Blog Create/Edit Modal */}
      {showCreateModal && (
        <BlogFormModal
          blog={isEditing ? selectedBlog : null}
          majors={majors}
          onClose={() => setShowCreateModal(false)}
          onSubmit={handleBlogSubmit}
          isEditing={isEditing}
        />
      )}
    </div>
  );
};

export default ConsultantBlog;
