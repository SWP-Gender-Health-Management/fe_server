import React, { useState } from 'react';
import QuestionModal from './QuestionModal';
import './ConsultantQuestion.css';

const ConsultantQuestion = () => {
  const [filter, setFilter] = useState('Unreply');
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [showModal, setShowModal] = useState(false);

  // Mock data cho questions
  const [questions, setQuestions] = useState([
    {
      id: 'Q001',
      customerName: 'Nguy·ªÖn Th·ªã A',
      customerDOB: '1995-05-15',
      customerPhone: '0123456789',
      content:
        'T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ c√°c ph∆∞∆°ng ph√°p tr√°nh thai an to√†n v√† hi·ªáu qu·∫£. C√≥ th·ªÉ t∆∞ v·∫•n cho t√¥i ƒë∆∞·ª£c kh√¥ng?',
      createdAt: '2024-01-15T10:30:00Z',
      status: 'unreplied', // unreplied, replied
      reply: null,
      consultantName: null,
      repliedAt: null,
    },
    {
      id: 'Q002',
      customerName: 'Tr·∫ßn VƒÉn B',
      customerDOB: '1990-12-20',
      customerPhone: '0987654321',
      content:
        'G·∫ßn ƒë√¢y t√¥i c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ v·ªÅ s·ª©c kh·ªèe sinh s·∫£n. C√°c tri·ªáu ch·ª©ng bao g·ªìm ƒëau b·ª•ng d∆∞·ªõi v√† kh√≥ ch·ªãu. T√¥i n√™n l√†m g√¨?',
      createdAt: '2024-01-14T14:20:00Z',
      status: 'unreplied',
      reply: null,
      consultantName: null,
      repliedAt: null,
    },
    {
      id: 'Q003',
      customerName: 'L√™ Th·ªã C',
      customerDOB: '1988-03-10',
      customerPhone: '0456789123',
      content:
        'T√¥i ƒëang c√≥ k·∫ø ho·∫°ch sinh con. C√≥ nh·ªØng l∆∞u √Ω g√¨ v·ªÅ vi·ªác chu·∫©n b·ªã tr∆∞·ªõc khi mang thai?',
      createdAt: '2024-01-13T09:15:00Z',
      status: 'replied',
      reply:
        'Vi·ªác chu·∫©n b·ªã tr∆∞·ªõc khi mang thai r·∫•t quan tr·ªçng. B·∫°n n√™n b·ªï sung acid folic, ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t, v√† tham kh·∫£o √Ω ki·∫øn b√°c sƒ© v·ªÅ ch·∫ø ƒë·ªô dinh d∆∞·ª°ng ph√π h·ª£p.',
      consultantName: 'T∆∞ v·∫•n vi√™n',
      repliedAt: '2024-01-13T15:30:00Z',
    },
    {
      id: 'Q004',
      customerName: 'Ph·∫°m VƒÉn D',
      customerDOB: '1992-08-25',
      customerPhone: '0321654987',
      content:
        'T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ c√°c b·ªánh l√¢y nhi·ªÖm qua ƒë∆∞·ªùng t√¨nh d·ª•c v√† c√°ch ph√≤ng ng·ª´a.',
      createdAt: '2024-01-12T16:45:00Z',
      status: 'replied',
      reply:
        'C√°c b·ªánh l√¢y nhi·ªÖm qua ƒë∆∞·ªùng t√¨nh d·ª•c c√≥ th·ªÉ ph√≤ng ng·ª´a b·∫±ng c√°ch s·ª≠ d·ª•ng bao cao su, c√≥ quan h·ªá m·ªôt v·ª£ m·ªôt ch·ªìng, v√† th·ª±c hi·ªán ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥. B·∫°n c√≥ th·ªÉ ƒë·∫øn trung t√¢m ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n.',
      consultantName: 'T∆∞ v·∫•n vi√™n',
      repliedAt: '2024-01-12T18:20:00Z',
    },
  ]);

  // Filter questions based on status
  const filteredQuestions = questions.filter((question) => {
    if (filter === 'Unreply') {
      return question.status === 'unreplied';
    } else if (filter === 'Replied') {
      return question.status === 'replied';
    }
    return true;
  });

  // Handle question click
  const handleQuestionClick = (question) => {
    setSelectedQuestion(question);
    setShowModal(true);
  };

  // Handle reply submission
  const handleReplySubmit = (questionId, reply) => {
    setQuestions((prev) =>
      prev.map((q) =>
        q.id === questionId
          ? {
              ...q,
              status: 'replied',
              reply: reply,
              consultantName:
                sessionStorage.getItem('full_name') || 'T∆∞ v·∫•n vi√™n',
              repliedAt: new Date().toISOString(),
            }
          : q
      )
    );
    setShowModal(false);
  };

  // Format date
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return (
      date.toLocaleDateString('vi-VN') +
      ' ' +
      date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })
    );
  };

  return (
    <div className="consultant-question">
      <div className="question-header">
        <h1>C√¢u H·ªèi T·ª´ Kh√°ch H√†ng</h1>
        <div className="question-stats">
          <div className="stat-item">
            <span className="stat-number">
              {questions.filter((q) => q.status === 'unreplied').length}
            </span>
            <span className="stat-label">Ch∆∞a tr·∫£ l·ªùi</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">
              {questions.filter((q) => q.status === 'replied').length}
            </span>
            <span className="stat-label">ƒê√£ tr·∫£ l·ªùi</span>
          </div>
        </div>
      </div>

      <div className="question-filters">
        {['Unreply', 'Replied'].map((filterOption) => (
          <button
            key={filterOption}
            className={`filter-btn ${filter === filterOption ? 'active' : ''}`}
            onClick={() => setFilter(filterOption)}
          >
            {filterOption === 'Unreply' ? 'Ch∆∞a tr·∫£ l·ªùi' : 'ƒê√£ tr·∫£ l·ªùi'}
            <span className="filter-count">
              (
              {
                questions.filter((q) =>
                  filterOption === 'Unreply'
                    ? q.status === 'unreplied'
                    : q.status === 'replied'
                ).length
              }
              )
            </span>
          </button>
        ))}
      </div>

      <div className="questions-list">
        {filteredQuestions.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">‚ùì</div>
            <h3>Kh√¥ng c√≥ c√¢u h·ªèi n√†o</h3>
            <p>
              {filter === 'Unreply'
                ? 'Hi·ªán t·∫°i ch∆∞a c√≥ c√¢u h·ªèi n√†o c·∫ßn tr·∫£ l·ªùi.'
                : 'B·∫°n ch∆∞a tr·∫£ l·ªùi c√¢u h·ªèi n√†o.'}
            </p>
          </div>
        ) : (
          filteredQuestions.map((question) => (
            <div
              key={question.id}
              className={`question-card ${question.status}`}
              onClick={() => handleQuestionClick(question)}
            >
              <div className="question-info">
                <div className="question-header-info">
                  <div className="customer-info">
                    <span className="customer-name">
                      {question.customerName}
                    </span>
                    <span className="question-date">
                      {formatDate(question.createdAt)}
                    </span>
                  </div>
                  <div className={`status-badge status-${question.status}`}>
                    {question.status === 'unreplied'
                      ? 'Ch∆∞a tr·∫£ l·ªùi'
                      : 'ƒê√£ tr·∫£ l·ªùi'}
                  </div>
                </div>
                <div className="question-content">
                  <p>{question.content}</p>
                </div>
                {question.status === 'replied' && (
                  <div className="reply-preview">
                    <strong>Tr·∫£ l·ªùi:</strong>
                    <p>{question.reply}</p>
                    <div className="reply-info">
                      <span>B·ªüi {question.consultantName}</span>
                      <span>{formatDate(question.repliedAt)}</span>
                    </div>
                  </div>
                )}
              </div>
              <div className="question-actions">
                <button className="btn btn-primary">
                  {question.status === 'unreplied'
                    ? 'üëÅÔ∏è Xem & Tr·∫£ l·ªùi'
                    : 'üëÅÔ∏è Xem chi ti·∫øt'}
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      {showModal && (
        <QuestionModal
          question={selectedQuestion}
          onClose={() => setShowModal(false)}
          onReply={handleReplySubmit}
        />
      )}
    </div>
  );
};

export default ConsultantQuestion;
