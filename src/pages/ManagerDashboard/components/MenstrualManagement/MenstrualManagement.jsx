import React, { useState, useEffect } from 'react';
import PieChart from '../Chart/PieChart';
import './MenstrualManagement.css';

const MenstrualManagement = () => {
  const [stats, setStats] = useState({});
  const [cycleDistribution, setCycleDistribution] = useState([]);
  const [monthlyNotifications, setMonthlyNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    try {
      setLoading(true);

      // Mock aggregated statistics (no personal data)
      const mockStats = {
        totalUsers: 1247,
        activeUsersThisMonth: 823,
        newUsersThisMonth: 156,
        averageCycleLength: 28.3,
        notificationsSentThisMonth: 3421,
        predictionAccuracy: 87.2,
        dataRetentionCompliance: 98.5,
      };

      // Mock cycle length distribution
      const mockCycleDistribution = [
        { label: '21-24 ng√†y', value: 185, color: '#ef4444' },
        { label: '25-27 ng√†y', value: 298, color: '#f59e0b' },
        { label: '28-30 ng√†y', value: 512, color: '#10b981' },
        { label: '31-33 ng√†y', value: 189, color: '#3b82f6' },
        { label: '34+ ng√†y', value: 63, color: '#8b5cf6' },
      ];

      // Mock monthly notification data
      const mockMonthlyNotifications = [
        { month: 'T7', predictions: 245, reminders: 489, health_tips: 123 },
        { month: 'T8', predictions: 267, reminders: 523, health_tips: 145 },
        { month: 'T9', predictions: 289, reminders: 556, health_tips: 167 },
        { month: 'T10', predictions: 312, reminders: 578, health_tips: 189 },
        { month: 'T11', predictions: 334, reminders: 601, health_tips: 201 },
        { month: 'T12', predictions: 356, reminders: 634, health_tips: 223 },
      ];

      setStats(mockStats);
      setCycleDistribution(mockCycleDistribution);
      setMonthlyNotifications(mockMonthlyNotifications);
      setError(null);
    } catch (err) {
      console.error('Error loading menstrual data:', err);
      setError('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
    } finally {
      setLoading(false);
    }
  }, []);

  const formatNumber = (num) => {
    if (!num && num !== 0) return '0';
    return new Intl.NumberFormat('vi-VN').format(num);
  };

  const formatPercentage = (num) => {
    if (!num && num !== 0) return '0%';
    return `${num.toFixed(1)}%`;
  };

  if (loading) {
    return (
      <div className="menstrual-management">
        <div
          style={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            minHeight: '400px',
            fontSize: '16px',
            color: '#10b981',
          }}
        >
          ƒêang t·∫£i d·ªØ li·ªáu...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="menstrual-management">
        <div
          style={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            minHeight: '400px',
            fontSize: '16px',
            color: '#ef4444',
          }}
        >
          {error}
        </div>
      </div>
    );
  }

  return (
    <div className="menstrual-management">
      <div className="menstrual-header">
        <h2>Qu·∫£n l√Ω Chu k·ª≥ Kinh nguy·ªát</h2>
        <p>
          Th·ªëng k√™ t·ªïng h·ª£p v√† b√°o c√°o ·∫©n danh v·ªÅ d·ªØ li·ªáu chu k·ª≥ kinh nguy·ªát
        </p>
        <div className="privacy-notice">
          <span className="privacy-icon">üîí</span>
          <span>T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c ·∫©n danh v√† tu√¢n th·ªß quy ƒë·ªãnh b·∫£o m·∫≠t</span>
        </div>
      </div>

      {/* Statistics Overview */}
      <div className="stats-grid">
        <div className="stat-card primary">
          <div className="stat-icon">üë•</div>
          <div className="stat-content">
            <div className="stat-value">{formatNumber(stats.totalUsers)}</div>
            <div className="stat-label">T·ªïng ng∆∞·ªùi d√πng theo d√µi</div>
            <div className="stat-change positive">
              +{formatNumber(stats.newUsersThisMonth)} ng∆∞·ªùi m·ªõi th√°ng n√†y
            </div>
          </div>
        </div>

        <div className="stat-card secondary">
          <div className="stat-icon">üìä</div>
          <div className="stat-content">
            <div className="stat-value">
              {formatNumber(stats.activeUsersThisMonth)}
            </div>
            <div className="stat-label">Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông</div>
            <div className="stat-change neutral">
              Trong th√°ng {new Date().getMonth() + 1}
            </div>
          </div>
        </div>

        <div className="stat-card accent">
          <div className="stat-icon">üìÖ</div>
          <div className="stat-content">
            <div className="stat-value">{stats.averageCycleLength} ng√†y</div>
            <div className="stat-label">ƒê·ªô d√†i chu k·ª≥ trung b√¨nh</div>
            <div className="stat-change neutral">D·ªØ li·ªáu t·ªïng h·ª£p</div>
          </div>
        </div>

        <div className="stat-card info">
          <div className="stat-icon">üîî</div>
          <div className="stat-content">
            <div className="stat-value">
              {formatNumber(stats.notificationsSentThisMonth)}
            </div>
            <div className="stat-label">Th√¥ng b√°o ƒë√£ g·ª≠i</div>
            <div className="stat-change positive">Th√°ng n√†y</div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="menstrual-main">
        {/* Cycle Distribution Chart */}
        <div className="chart-section">
          <div className="section-header">
            <h3>Ph√¢n b·ªï ƒë·ªô d√†i chu k·ª≥</h3>
            <p>Th·ªëng k√™ ·∫©n danh v·ªÅ ƒë·ªô d√†i chu k·ª≥ kinh nguy·ªát c·ªßa ng∆∞·ªùi d√πng</p>
          </div>
          <div className="chart-container">
            {cycleDistribution && cycleDistribution.length > 0 ? (
              <PieChart data={cycleDistribution} />
            ) : (
              <div style={{ color: '#6b7280', textAlign: 'center' }}>
                Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
              </div>
            )}
          </div>
          <div className="chart-legend">
            {cycleDistribution &&
              cycleDistribution.map((item, index) => (
                <div key={index} className="legend-item">
                  <div
                    className="legend-color"
                    style={{ backgroundColor: item.color }}
                  ></div>
                  <span className="legend-label">
                    {item.label}: {item.value} ng∆∞·ªùi (
                    {stats.totalUsers
                      ? ((item.value / stats.totalUsers) * 100).toFixed(1)
                      : 0}
                    %)
                  </span>
                </div>
              ))}
          </div>
        </div>

        {/* Performance Metrics */}
        <div className="metrics-section">
          <div className="section-header">
            <h3>Hi·ªáu su·∫•t h·ªá th·ªëng</h3>
            <p>C√°c ch·ªâ s·ªë quan tr·ªçng v·ªÅ ch·∫•t l∆∞·ª£ng d·ªãch v·ª•</p>
          </div>

          <div className="metrics-grid">
            <div className="metric-item">
              <div className="metric-icon">üéØ</div>
              <div className="metric-content">
                <div className="metric-value">
                  {formatPercentage(stats.predictionAccuracy)}
                </div>
                <div className="metric-label">ƒê·ªô ch√≠nh x√°c d·ª± ƒëo√°n</div>
                <div className="metric-description">
                  T·ª∑ l·ªá d·ª± ƒëo√°n chu k·ª≥ ch√≠nh x√°c
                </div>
              </div>
            </div>

            <div className="metric-item">
              <div className="metric-icon">‚úÖ</div>
              <div className="metric-content">
                <div className="metric-value">
                  {formatPercentage(stats.dataRetentionCompliance)}
                </div>
                <div className="metric-label">Tu√¢n th·ªß b·∫£o m·∫≠t</div>
                <div className="metric-description">
                  T·ª∑ l·ªá tu√¢n th·ªß quy ƒë·ªãnh l∆∞u tr·ªØ d·ªØ li·ªáu
                </div>
              </div>
            </div>

            <div className="metric-item">
              <div className="metric-icon">üìà</div>
              <div className="metric-content">
                <div className="metric-value">
                  {formatNumber(stats.newUsersThisMonth)}
                </div>
                <div className="metric-label">TƒÉng tr∆∞·ªüng th√°ng</div>
                <div className="metric-description">
                  S·ªë ng∆∞·ªùi d√πng m·ªõi tham gia
                </div>
              </div>
            </div>

            <div className="metric-item">
              <div className="metric-icon">üí¨</div>
              <div className="metric-content">
                <div className="metric-value">
                  {stats.totalUsers && stats.activeUsersThisMonth
                    ? formatPercentage(
                        (stats.activeUsersThisMonth / stats.totalUsers) * 100
                      )
                    : '0%'}
                </div>
                <div className="metric-label">T·ª∑ l·ªá t∆∞∆°ng t√°c</div>
                <div className="metric-description">
                  Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông trong th√°ng
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Notification Analytics */}
      <div className="notifications-section">
        <div className="section-header">
          <h3>Th·ªëng k√™ th√¥ng b√°o</h3>
          <p>S·ªë l∆∞·ª£ng th√¥ng b√°o ƒë∆∞·ª£c g·ª≠i trong 6 th√°ng g·∫ßn ƒë√¢y</p>
        </div>

        <div className="notifications-chart">
          <div className="chart-header">
            <div className="chart-legend-horizontal">
              <div className="legend-item">
                <div
                  className="legend-color"
                  style={{ backgroundColor: '#10b981' }}
                ></div>
                <span>D·ª± ƒëo√°n chu k·ª≥</span>
              </div>
              <div className="legend-item">
                <div
                  className="legend-color"
                  style={{ backgroundColor: '#3b82f6' }}
                ></div>
                <span>Nh·∫Øc nh·ªü</span>
              </div>
              <div className="legend-item">
                <div
                  className="legend-color"
                  style={{ backgroundColor: '#8b5cf6' }}
                ></div>
                <span>M·∫πo s·ª©c kh·ªèe</span>
              </div>
            </div>
          </div>

          <div className="bar-chart">
            {monthlyNotifications.map((month, index) => {
              const total =
                month.predictions + month.reminders + month.health_tips;
              const maxTotal = Math.max(
                ...monthlyNotifications.map(
                  (m) => m.predictions + m.reminders + m.health_tips
                )
              );

              return (
                <div key={index} className="bar-group">
                  <div
                    className="bar-stack"
                    style={{ height: `${(total / maxTotal) * 200}px` }}
                  >
                    <div
                      className="bar-segment predictions"
                      style={{
                        height: `${(month.predictions / total) * 100}%`,
                        backgroundColor: '#10b981',
                      }}
                    ></div>
                    <div
                      className="bar-segment reminders"
                      style={{
                        height: `${(month.reminders / total) * 100}%`,
                        backgroundColor: '#3b82f6',
                      }}
                    ></div>
                    <div
                      className="bar-segment health-tips"
                      style={{
                        height: `${(month.health_tips / total) * 100}%`,
                        backgroundColor: '#8b5cf6',
                      }}
                    ></div>
                  </div>
                  <div className="bar-label">{month.month}</div>
                  <div className="bar-total">{formatNumber(total)}</div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Privacy & Compliance */}
      <div className="compliance-section">
        <div className="section-header">
          <h3>Tu√¢n th·ªß & B·∫£o m·∫≠t</h3>
          <p>Cam k·∫øt b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞ v√† tu√¢n th·ªß quy ƒë·ªãnh</p>
        </div>

        <div className="compliance-grid">
          <div className="compliance-item">
            <div className="compliance-icon">üîê</div>
            <div className="compliance-content">
              <h4>M√£ h√≥a d·ªØ li·ªáu</h4>
              <p>T·∫•t c·∫£ d·ªØ li·ªáu chu k·ª≥ ƒë∆∞·ª£c m√£ h√≥a end-to-end</p>
            </div>
          </div>

          <div className="compliance-item">
            <div className="compliance-icon">üóëÔ∏è</div>
            <div className="compliance-content">
              <h4>T·ª± ƒë·ªông x√≥a</h4>
              <p>D·ªØ li·ªáu c≈© ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a sau 24 th√°ng</p>
            </div>
          </div>

          <div className="compliance-item">
            <div className="compliance-icon">üìä</div>
            <div className="compliance-content">
              <h4>·∫®n danh h√≥a</h4>
              <p>Ch·ªâ l∆∞u tr·ªØ v√† x·ª≠ l√Ω d·ªØ li·ªáu ·∫©n danh</p>
            </div>
          </div>

          <div className="compliance-item">
            <div className="compliance-icon">‚úÖ</div>
            <div className="compliance-content">
              <h4>Tu√¢n th·ªß GDPR</h4>
              <p>ƒê√°p ·ª©ng ƒë·∫ßy ƒë·ªß c√°c y√™u c·∫ßu b·∫£o m·∫≠t qu·ªëc t·∫ø</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MenstrualManagement;
