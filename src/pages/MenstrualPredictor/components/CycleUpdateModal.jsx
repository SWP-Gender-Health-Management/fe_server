import React from 'react';
import {
  Modal,
  Form,
  Input,
  InputNumber,
  DatePicker,
  Button,
  message,
} from 'antd';
import { CalendarOutlined, EditOutlined } from '@ant-design/icons';
import dayjs from 'dayjs';
import './CycleUpdateModal.css';

const CycleUpdateModal = ({
  visible,
  onCancel,
  lastPeriodStart,
  setLastPeriodStart,
  lastPeriodEnd,
  setLastPeriodEnd,
  cycleLength,
  setCycleLength,
  periodLength,
  setPeriodLength,
  onUpdate,
}) => {
  const [form] = Form.useForm();

  // T·ª± ƒë·ªông t√≠nh periodLength khi lastPeriodStart thay ƒë·ªïi
  const handleFormValuesChange = (changedValues, allValues) => {
    const { lastPeriodStart } = allValues;

    if (lastPeriodStart) {
      // T√≠nh periodLength d·ª±a tr√™n cycleLength (th∆∞·ªùng l√† 5-7 ng√†y)
      const calculatedPeriodLength = Math.min(
        7,
        Math.max(3, Math.floor(cycleLength / 5))
      );
      form.setFieldsValue({ periodLength: calculatedPeriodLength });
    }
  };

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();

      // Update state with form values
      setLastPeriodStart(values.lastPeriodStart.format('YYYY-MM-DD'));
      setLastPeriodEnd(values.lastPeriodEnd.format('YYYY-MM-DD'));
      setCycleLength(values.cycleLength);
      // setPeriodLength(values.periodLength);

      // Call parent update function
      await onUpdate();

      message.success('C·∫≠p nh·∫≠t th√¥ng tin chu k·ª≥ th√†nh c√¥ng!');
    } catch (error) {
      console.error('Form validation error:', error);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  // const disabledDate = (current) => {
  //   const threeMonthsAgo = moment().subtract(3, 'months');
  //   return (
  //     current && (current > moment().endOf('day') || current < threeMonthsAgo)
  //   );
  // };

  return (
    <Modal
      title={
        <div className="modal-title">
          <EditOutlined className="modal-icon" />
          <span>C·∫≠p Nh·∫≠t Th√¥ng Tin Chu K·ª≥</span>
        </div>
      }
      open={visible}
      onCancel={handleCancel}
      footer={[
        <Button key="cancel" onClick={handleCancel}>
          H·ªßy
        </Button>,
        <Button
          key="submit"
          // type="primary"
          onClick={handleSubmit}
          className="submit-button"
        >
          C·∫≠p Nh·∫≠t
        </Button>,
      ]}
      width={500}
      centered
      className="cycle-update-modal"
    >
      <div className="modal-content">
        <div className="info-section">
          <CalendarOutlined className="info-icon" />
          <div className="info-text">
            <h4>C·∫≠p nh·∫≠t th√¥ng tin chu k·ª≥ kinh nguy·ªát</h4>
            <p>Nh·∫≠p th√¥ng tin ch√≠nh x√°c ƒë·ªÉ c√≥ d·ª± ƒëo√°n t·ªët h∆°n</p>
          </div>
        </div>

        <Form
          form={form}
          layout="vertical"
          className="update-form"
          initialValues={{
            lastPeriodStart: lastPeriodStart ? dayjs(lastPeriodStart) : null,
            cycleLength: cycleLength || 28,
            periodLength: periodLength || 5,
          }}
          onValuesChange={handleFormValuesChange}
        >
          <Form.Item
            label="Ng√†y b·∫Øt ƒë·∫ßu k·ª≥ kinh g·∫ßn nh·∫•t"
            name="lastPeriodStart"
            rules={[
              {
                required: true,
                message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu k·ª≥ kinh!',
              },
              {
                validator: (_, value) => {
                  if (!value) {
                    return Promise.resolve();
                  }

                  const today = dayjs();
                  const threeMonthsAgo = dayjs().subtract(3, 'months');

                  if (value.isAfter(today)) {
                    return Promise.reject(
                      new Error(
                        'Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ l√† ng√†y trong t∆∞∆°ng lai!'
                      )
                    );
                  }

                  if (value.isBefore(threeMonthsAgo)) {
                    return Promise.reject(
                      new Error('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ qu√° 3 th√°ng tr∆∞·ªõc!')
                    );
                  }

                  return Promise.resolve();
                },
              },
            ]}
          >
            <DatePicker
              style={{ width: '100%' }}
              placeholder="Ch·ªçn ng√†y"
              format="DD/MM/YYYY"
              selected={dayjs()}
              suffixIcon={<CalendarOutlined />}
              // disabledDate={disabledDate}
            />
          </Form.Item>

          <Form.Item
            label="Ng√†y k·∫øt th√∫c k·ª≥ kinh g·∫ßn th√°ng n√†y"
            name="lastPeriodEnd"
            rules={[
              {
                required: true,
                message: 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c k·ª≥ kinh!',
              },
              {
                validator: (_, value) => {
                  if (!value) {
                    return Promise.resolve();
                  }

                  const today = dayjs();
                  const threeMonthsAgo = dayjs().subtract(3, 'months');

                  if (value.isAfter(today)) {
                    return Promise.reject(
                      new Error(
                        'Ng√†y k·∫øt th√∫c kh√¥ng th·ªÉ l√† ng√†y trong t∆∞∆°ng lai!'
                      )
                    );
                  }

                  if (value.isBefore(threeMonthsAgo)) {
                    return Promise.reject(
                      new Error('Ng√†y k·∫øt th√∫c kh√¥ng th·ªÉ qu√° 3 th√°ng tr∆∞·ªõc!')
                    );
                  }

                  const startDate = dayjs(lastPeriodStart);
                  if (value.isBefore(startDate)) {
                    return Promise.reject(
                      new Error('Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!')
                    );
                  }

                  return Promise.resolve();
                },
              },
            ]}
          >
            <DatePicker
              style={{ width: '100%' }}
              placeholder="Ch·ªçn ng√†y"
              format="DD/MM/YYYY"
              selected={dayjs()}
              suffixIcon={<CalendarOutlined />}
              // disabledDate={disabledDate}
            />
          </Form.Item>

          <Form.Item
            label="ƒê·ªô d√†i chu k·ª≥ (ng√†y)"
            name="cycleLength"
            rules={[
              {
                required: true,
                message: 'Vui l√≤ng nh·∫≠p ƒë·ªô d√†i chu k·ª≥!',
              },
              {
                type: 'number',
                min: 21,
                max: 35,
                message: 'ƒê·ªô d√†i chu k·ª≥ ph·∫£i t·ª´ 21-35 ng√†y!',
              },
            ]}
          >
            <InputNumber
              style={{ width: '100%' }}
              placeholder="V√≠ d·ª•: 28"
              min={21}
              max={35}
              defaultValue={cycleLength || 28}
            />
          </Form.Item>
        </Form>

        <div className="tips-section">
          <h4>üí° L∆∞u √Ω:</h4>
          <ul>
            <li>ƒê·ªô d√†i chu k·ª≥ th∆∞·ªùng t·ª´ 21-35 ng√†y</li>
            <li>K·ª≥ kinh th∆∞·ªùng k√©o d√†i 1-7 ng√†y</li>
            <li>C·∫≠p nh·∫≠t th√¥ng tin ch√≠nh x√°c ƒë·ªÉ c√≥ d·ª± ƒëo√°n t·ªët h∆°n</li>
          </ul>
        </div>
      </div>
    </Modal>
  );
};

export default CycleUpdateModal;
