import { useState } from 'react';
import {
  Card,
  Button,
  DatePicker,
  Input,
  InputNumber,
  Form,
  message,
  Steps,
  Radio,
  Alert,
  Divider,
} from 'antd';
import {
  HeartOutlined,
  CalendarOutlined,
  InfoCircleOutlined,
  CheckCircleOutlined,
} from '@ant-design/icons';
import dayjs from 'dayjs';
import axios from 'axios';
import Cookies from 'js-cookie';
import './SetupMenstrualForm.css';

const { TextArea } = Input;
const { Step } = Steps;

const API_URL = 'http://localhost:3000';

const SetupSuccessPage = ({ onSetupComplete, onEditInfo }) => {
  return (
    <div className="setup-complete">
      <div style={{ textAlign: 'center', padding: '40px 20px' }}>
        <div
          style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            borderRadius: '50%',
            width: '80px',
            height: '80px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            margin: '0 auto 24px',
            boxShadow: '0 8px 32px rgba(102, 126, 234, 0.3)',
          }}
        >
          <CheckCircleOutlined
            style={{
              fontSize: '40px',
              color: '#ffffff',
            }}
          />
        </div>

        <h2
          style={{
            color: '#262626',
            fontSize: '24px',
            marginBottom: '16px',
            fontWeight: '600',
          }}
        >
          Thi·∫øt l·∫≠p th√†nh c√¥ng! üéâ
        </h2>

        <p
          style={{
            color: '#666',
            fontSize: '16px',
            marginBottom: '8px',
            lineHeight: '1.6',
          }}
        >
          B·∫°n ƒë√£ thi·∫øt l·∫≠p th√†nh c√¥ng theo d√µi chu k·ª≥ kinh nguy·ªát.
        </p>

        <p
          style={{
            color: '#888',
            fontSize: '14px',
            marginBottom: '32px',
            lineHeight: '1.5',
          }}
        >
          H·ªá th·ªëng s·∫Ω b·∫Øt ƒë·∫ßu theo d√µi v√† d·ª± ƒëo√°n chu k·ª≥ c·ªßa b·∫°n d·ª±a tr√™n th√¥ng
          tin ƒë√£ cung c·∫•p.
        </p>

        <div
          style={{
            display: 'flex',
            gap: '12px',
            justifyContent: 'center',
            flexWrap: 'wrap',
          }}
        >
          <Button
            type="primary"
            size="large"
            onClick={onSetupComplete}
            style={{
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              border: 'none',
              borderRadius: '8px',
              padding: '12px 24px',
              height: 'auto',
              fontSize: '16px',
              fontWeight: '500',
            }}
            icon={<CalendarOutlined />}
          >
            Xem D·ª± ƒêo√°n Chu K·ª≥
          </Button>

          <Button
            type="default"
            size="large"
            onClick={onEditInfo}
            style={{
              borderRadius: '8px',
              padding: '12px 24px',
              height: 'auto',
              fontSize: '16px',
            }}
          >
            Ch·ªânh S·ª≠a Th√¥ng Tin
          </Button>
        </div>

        <div
          style={{
            marginTop: '32px',
            padding: '16px',
            background: '#f8f9fa',
            borderRadius: '8px',
            border: '1px solid #e9ecef',
          }}
        >
          <h4
            style={{ color: '#495057', marginBottom: '8px', fontSize: '14px' }}
          >
            üí° L∆∞u √Ω quan tr·ªçng:
          </h4>
          <ul
            style={{
              textAlign: 'left',
              color: '#6c757d',
              fontSize: '13px',
              margin: '0',
              paddingLeft: '20px',
            }}
          >
            <li>
              D·ªØ li·ªáu c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ d√πng cho m·ª•c ƒë√≠ch theo d√µi s·ª©c
              kh·ªèe
            </li>
            <li>
              ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t, h√£y c·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãnh k·ª≥
            </li>
            <li>B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin b·∫•t k·ª≥ l√∫c n√†o</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

const SetupMenstrualForm = ({ onSetupComplete }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const handleSubmit = async (values) => {
    setLoading(true);

    try {
      const token = Cookies.get('accessToken');

      if (!token) {
        message.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y!');
        setLoading(false);
        return;
      }

      let payload;

      payload = {
        start_date: values.startDate.toISOString(),
        end_date: values.endDate.toISOString(),
        period: values.cycleLength.toString() || '5',
        note: values.description || 'ƒêƒÉng k√Ω theo d√µi chu k·ª≥ l·∫ßn ƒë·∫ßu',
      };

      const response = await axios.post(
        `${API_URL}/customer/track-period`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      message.success('Thi·∫øt l·∫≠p theo d√µi chu k·ª≥ kinh nguy·ªát th√†nh c√¥ng! üéâ');

      setCurrentStep(1);
    } catch (error) {
      console.error('Error during setup:', error);

      if (error.response?.status === 401) {
        message.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!');
      } else if (error.response?.status === 400) {
        message.error('Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!');
      } else if (!error.response) {
        message.error(
          'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!'
        );
      } else {
        message.error(
          `L·ªói: ${error.response?.data?.message || 'Kh√¥ng th·ªÉ thi·∫øt l·∫≠p theo d√µi chu k·ª≥'}`
        );
      }
    } finally {
      setLoading(false);
    }
  };

  const handleFormFailed = (errorInfo) => {
    message.error('Vui l√≤ng ki·ªÉm tra v√† ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
  };

  const disabledDate = (current) => {
    const threeMonthsAgo = dayjs().subtract(3, 'month');
    return (
      current && (current > dayjs().endOf('day') || current < threeMonthsAgo)
    );
  };

  const nextStep = () => {
    setCurrentStep(currentStep + 1);
  };

  const prevStep = () => {
    setCurrentStep(currentStep - 1);
  };

  const steps = [
    {
      title: 'Nh·∫≠p th√¥ng tin',
      content: 'Cung c·∫•p th√¥ng tin chu k·ª≥',
    },
    {
      title: 'Ho√†n th√†nh',
      content: 'X√°c nh·∫≠n v√† b·∫Øt ƒë·∫ßu theo d√µi',
    },
  ];

  return (
    <div className="setup-form-container">
      <Card
        className="setup-form-card"
        title={
          <div className="setup-form-title">
            <HeartOutlined style={{ color: '#ff69b4', marginRight: '8px' }} />
            Thi·∫øt L·∫≠p Theo D√µi Chu K·ª≥ Kinh Nguy·ªát
          </div>
        }
      >
        <Steps current={currentStep} className="setup-steps">
          {steps.map((item) => (
            <Step key={item.title} title={item.title} />
          ))}
        </Steps>

        <Divider />

        {currentStep === 0 && (
          <Form
            form={form}
            layout="vertical"
            onFinish={handleSubmit}
            onFinishFailed={handleFormFailed}
            className="setup-form"
            initialValues={{
              cycleLength: 28,
            }}
          >
            <Alert
              message="Nh·∫≠p th√¥ng tin k·ª≥ kinh g·∫ßn nh·∫•t"
              description="Vui l√≤ng nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa k·ª≥ kinh g·∫ßn nh·∫•t ƒë·ªÉ h·ªá th·ªëng c√≥ th·ªÉ d·ª± ƒëo√°n ch√≠nh x√°c nh·∫•t."
              type="info"
              showIcon
              style={{ marginBottom: '24px' }}
            />

            <Form.Item
              name="startDate"
              label="Ng√†y b·∫Øt ƒë·∫ßu k·ª≥ kinh g·∫ßn nh·∫•t"
              rules={[
                {
                  required: true,
                  message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu k·ª≥ kinh!',
                },
              ]}
            >
              <DatePicker
                style={{ width: '100%' }}
                placeholder="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu"
                disabledDate={disabledDate}
                format="DD/MM/YYYY"
                suffixIcon={<CalendarOutlined />}
              />
            </Form.Item>

            <Form.Item
              name="endDate"
              label="Ng√†y k·∫øt th√∫c k·ª≥ kinh g·∫ßn nh·∫•t"
              rules={[
                {
                  required: true,
                  message: 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c k·ª≥ kinh!',
                },
              ]}
            >
              <DatePicker
                style={{ width: '100%' }}
                placeholder="Ch·ªçn ng√†y k·∫øt th√∫c"
                disabledDate={disabledDate}
                format="DD/MM/YYYY"
                suffixIcon={<CalendarOutlined />}
              />
            </Form.Item>

            <Form.Item
              name="cycleLength"
              label="ƒê·ªô d√†i chu k·ª≥ (ng√†y)"
              extra="Th·ªùi gian t·ª´ ng√†y ƒë·∫ßu k·ª≥ kinh n√†y ƒë·∫øn ng√†y ƒë·∫ßu k·ª≥ kinh ti·∫øp theo"
              initialValue={28}
              rules={[
                {
                  required: true,
                  message: 'Vui l√≤ng nh·∫≠p ƒë·ªô d√†i chu k·ª≥!',
                },
              ]}
            >
              <InputNumber
                style={{ width: '100%' }}
                placeholder="Nh·∫≠p s·ªë ng√†y (21-35)"
              // min={21}
              // max={35}
              />
            </Form.Item>

            <Form.Item name="description" label="Ghi ch√∫ (t√πy ch·ªçn)">
              <TextArea
                placeholder="Nh·∫≠p ghi ch√∫ v·ªÅ chu k·ª≥ c·ªßa b·∫°n..."
                rows={3}
                maxLength={500}
                showCount
              />
            </Form.Item>

            <div style={{ textAlign: 'center', marginTop: '24px' }}>
              <Button
                type="primary"
                htmlType="submit"
                loading={loading}
                size="large"
                onClick={() => {
                  form.submit();
                }}
              >
                B·∫Øt ƒê·∫ßu Theo D√µi
              </Button>
            </div>
          </Form>
        )}

        {currentStep === 1 && (
          <SetupSuccessPage
            onSetupComplete={onSetupComplete}
            onEditInfo={() => {
              setCurrentStep(1);
              form.resetFields();
            }}
          />
        )}

        <div className="setup-form-note">
          <p>
            <strong>L∆∞u √Ω quan tr·ªçng:</strong>
          </p>
          <ul>
            <li>
              Th√¥ng tin n√†y s·∫Ω gi√∫p h·ªá th·ªëng d·ª± ƒëo√°n chu k·ª≥ ti·∫øp theo c·ªßa b·∫°n
            </li>
            <li>B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t v√† ƒëi·ªÅu ch·ªânh th√¥ng tin b·∫•t k·ª≥ l√∫c n√†o</li>
            <li>
              D·ªØ li·ªáu c·ªßa b·∫°n ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ d√πng cho m·ª•c ƒë√≠ch theo d√µi s·ª©c
              kh·ªèe
            </li>
            <li>
              ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t, h√£y c·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãnh k·ª≥
            </li>
          </ul>
        </div>
      </Card>
    </div>
  );
};

export default SetupMenstrualForm;
