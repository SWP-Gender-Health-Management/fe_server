import React, { useState, useEffect } from 'react';
import './ConsultantBlog.css';

const ConsultantBlog = () => {
  const [articles, setArticles] = useState([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedArticle, setSelectedArticle] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [sortBy, setSortBy] = useState('newest');

  // Mock articles data
  useEffect(() => {
    const mockArticles = [
      {
        id: 1,
        title: 'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh: Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt',
        content:
          'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh l√† vi·ªác quy·∫øt ƒë·ªãnh s·ªë l∆∞·ª£ng con c√°i, kho·∫£ng c√°ch sinh v√† th·ªùi ƒëi·ªÉm sinh con ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán kinh t·∫ø, s·ª©c kh·ªèe...',
        excerpt:
          'H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°c ph∆∞∆°ng ph√°p k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh hi·ªán ƒë·∫°i v√† an to√†n.',
        status: 'published',
        createdAt: new Date('2024-01-15'),
        updatedAt: new Date('2024-01-15'),
        views: 1245,
        likes: 89,
        category: 'K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh',
        readingTime: 5,
        image: '/api/placeholder/400/200',
        tags: ['k·∫ø ho·∫°ch', 'gia ƒë√¨nh', 'tr√°nh thai'],
      },
      {
        id: 2,
        title: 'Chu k·ª≥ kinh nguy·ªát v√† s·ª©c kh·ªèe ph·ª• n·ªØ',
        content:
          'Chu k·ª≥ kinh nguy·ªát l√† m·ªôt ph·∫ßn quan tr·ªçng trong s·ª©c kh·ªèe sinh s·∫£n c·ªßa ph·ª• n·ªØ. Hi·ªÉu r√µ v·ªÅ chu k·ª≥ n√†y gi√∫p ch·ªã em theo d√µi...',
        excerpt:
          'T√¨m hi·ªÉu v·ªÅ chu k·ª≥ kinh nguy·ªát b√¨nh th∆∞·ªùng v√† c√°c d·∫•u hi·ªáu c·∫ßn l∆∞u √Ω.',
        status: 'draft',
        createdAt: new Date('2024-01-10'),
        updatedAt: new Date('2024-01-12'),
        views: 0,
        likes: 0,
        category: 'S·ª©c kh·ªèe sinh s·∫£n',
        readingTime: 7,
        image: '/api/placeholder/400/200',
        tags: ['kinh nguy·ªát', 's·ª©c kh·ªèe', 'ph·ª• n·ªØ'],
      },
      {
        id: 3,
        title: 'ChƒÉm s√≥c s·ª©c kh·ªèe sau sinh',
        content:
          'Th·ªùi k·ª≥ sau sinh l√† giai ƒëo·∫°n quan tr·ªçng ƒë·ªëi v·ªõi s·ª©c kh·ªèe c·ªßa ng∆∞·ªùi m·∫π. Vi·ªác chƒÉm s√≥c ƒë√∫ng c√°ch s·∫Ω gi√∫p m·∫π ph·ª•c h·ªìi nhanh ch√≥ng...',
        excerpt:
          'H∆∞·ªõng d·∫´n chƒÉm s√≥c to√†n di·ªán cho m·∫π trong giai ƒëo·∫°n sau sinh.',
        status: 'pending',
        createdAt: new Date('2024-01-08'),
        updatedAt: new Date('2024-01-08'),
        views: 567,
        likes: 34,
        category: 'Sau sinh',
        readingTime: 6,
        image: '/api/placeholder/400/200',
        tags: ['sau sinh', 'chƒÉm s√≥c', 'ph·ª•c h·ªìi'],
      },
    ];
    setArticles(mockArticles);
  }, []);

  const [newArticle, setNewArticle] = useState({
    title: '',
    content: '',
    excerpt: '',
    category: '',
    tags: [],
    image: null,
  });

  // Filter and sort articles
  const filteredAndSortedArticles = articles
    .filter((article) => {
      const matchesSearch =
        article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        article.content.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus =
        filterStatus === 'all' || article.status === filterStatus;
      return matchesSearch && matchesStatus;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt) - new Date(a.createdAt);
        case 'oldest':
          return new Date(a.createdAt) - new Date(b.createdAt);
        case 'views':
          return b.views - a.views;
        case 'likes':
          return b.likes - a.likes;
        case 'title':
          return a.title.localeCompare(b.title);
        default:
          return 0;
      }
    });

  const getStatusColor = (status) => {
    switch (status) {
      case 'published':
        return '#10b981';
      case 'draft':
        return '#6b7280';
      case 'pending':
        return '#f59e0b';
      case 'rejected':
        return '#ef4444';
      default:
        return '#6b7280';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'published':
        return 'ƒê√£ xu·∫•t b·∫£n';
      case 'draft':
        return 'B·∫£n nh√°p';
      case 'pending':
        return 'Ch·ªù duy·ªát';
      case 'rejected':
        return 'B·ªã t·ª´ ch·ªëi';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const handleCreateArticle = () => {
    if (!newArticle.title || !newArticle.content) {
      alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ v√† n·ªôi dung b√†i vi·∫øt');
      return;
    }

    const article = {
      id: Date.now(),
      ...newArticle,
      status: 'draft',
      createdAt: new Date(),
      updatedAt: new Date(),
      views: 0,
      likes: 0,
      readingTime: Math.ceil(newArticle.content.split(' ').length / 200),
    };

    setArticles([article, ...articles]);
    setNewArticle({
      title: '',
      content: '',
      excerpt: '',
      category: '',
      tags: [],
      image: null,
    });
    setShowCreateModal(false);
  };

  const handleDeleteArticle = (articleId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?')) {
      setArticles(articles.filter((article) => article.id !== articleId));
    }
  };

  const handleStatusChange = (articleId, newStatus) => {
    setArticles(
      articles.map((article) =>
        article.id === articleId
          ? { ...article, status: newStatus, updatedAt: new Date() }
          : article
      )
    );
  };

  const stats = {
    total: articles.length,
    published: articles.filter((a) => a.status === 'published').length,
    draft: articles.filter((a) => a.status === 'draft').length,
    pending: articles.filter((a) => a.status === 'pending').length,
    totalViews: articles.reduce((sum, a) => sum + a.views, 0),
    totalLikes: articles.reduce((sum, a) => sum + a.likes, 0),
  };

  return (
    <div className="consultant-blog">
      {/* Header */}
      <div className="blog-header">
        <div className="header-content">
          <h2>üìù Qu·∫£n l√Ω B√†i vi·∫øt</h2>
          <p>T·∫°o v√† qu·∫£n l√Ω c√°c b√†i blog chia s·∫ª ki·∫øn th·ª©c chuy√™n m√¥n</p>
        </div>

        <button className="create-btn" onClick={() => setShowCreateModal(true)}>
          ‚úèÔ∏è Vi·∫øt b√†i m·ªõi
        </button>
      </div>

      {/* Statistics */}
      <div className="blog-stats">
        <div className="stat-card">
          <span className="stat-icon">üìä</span>
          <div className="stat-content">
            <h3>{stats.total}</h3>
            <p>T·ªïng b√†i vi·∫øt</p>
          </div>
        </div>

        <div className="stat-card">
          <span className="stat-icon">‚úÖ</span>
          <div className="stat-content">
            <h3>{stats.published}</h3>
            <p>ƒê√£ xu·∫•t b·∫£n</p>
          </div>
        </div>

        <div className="stat-card">
          <span className="stat-icon">üìù</span>
          <div className="stat-content">
            <h3>{stats.draft}</h3>
            <p>B·∫£n nh√°p</p>
          </div>
        </div>

        <div className="stat-card">
          <span className="stat-icon">‚è≥</span>
          <div className="stat-content">
            <h3>{stats.pending}</h3>
            <p>Ch·ªù duy·ªát</p>
          </div>
        </div>

        <div className="stat-card">
          <span className="stat-icon">üëÄ</span>
          <div className="stat-content">
            <h3>{stats.totalViews}</h3>
            <p>L∆∞·ª£t xem</p>
          </div>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="blog-controls">
        <div className="search-section">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>

        <div className="filter-section">
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="filter-select"
          >
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="published">ƒê√£ xu·∫•t b·∫£n</option>
            <option value="draft">B·∫£n nh√°p</option>
            <option value="pending">Ch·ªù duy·ªát</option>
            <option value="rejected">B·ªã t·ª´ ch·ªëi</option>
          </select>

          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
            className="sort-select"
          >
            <option value="newest">M·ªõi nh·∫•t</option>
            <option value="oldest">C≈© nh·∫•t</option>
            <option value="views">Nhi·ªÅu l∆∞·ª£t xem</option>
            <option value="likes">Nhi·ªÅu l∆∞·ª£t th√≠ch</option>
            <option value="title">Theo t√™n</option>
          </select>
        </div>
      </div>

      {/* Articles Grid */}
      <div className="articles-grid">
        {filteredAndSortedArticles.length > 0 ? (
          filteredAndSortedArticles.map((article) => (
            <div key={article.id} className="article-card">
              <div className="article-image">
                <img src={article.image} alt={article.title} />
                <div className="article-status">
                  <span
                    className="status-badge"
                    style={{ backgroundColor: getStatusColor(article.status) }}
                  >
                    {getStatusText(article.status)}
                  </span>
                </div>
              </div>

              <div className="article-content">
                <div className="article-meta">
                  <span className="category">{article.category}</span>
                  <span className="reading-time">
                    {article.readingTime} ph√∫t ƒë·ªçc
                  </span>
                </div>

                <h3 className="article-title">{article.title}</h3>
                <p className="article-excerpt">{article.excerpt}</p>

                <div className="article-tags">
                  {article.tags.map((tag, index) => (
                    <span key={index} className="tag">
                      #{tag}
                    </span>
                  ))}
                </div>

                <div className="article-stats">
                  <span>üëÄ {article.views}</span>
                  <span>‚ù§Ô∏è {article.likes}</span>
                  <span>
                    üìÖ {article.createdAt.toLocaleDateString('vi-VN')}
                  </span>
                </div>
              </div>

              <div className="article-actions">
                <button
                  className="action-btn view"
                  onClick={() => {
                    setSelectedArticle(article);
                    setShowDetailModal(true);
                  }}
                >
                  üëÅÔ∏è Xem
                </button>
                <button className="action-btn edit">‚úèÔ∏è S·ª≠a</button>
                <button
                  className="action-btn delete"
                  onClick={() => handleDeleteArticle(article.id)}
                >
                  üóëÔ∏è X√≥a
                </button>

                {article.status === 'draft' && (
                  <button
                    className="action-btn publish"
                    onClick={() => handleStatusChange(article.id, 'pending')}
                  >
                    üì§ G·ª≠i duy·ªát
                  </button>
                )}
              </div>
            </div>
          ))
        ) : (
          <div className="empty-state">
            <span>üìù</span>
            <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
            <p>H√£y t·∫°o b√†i vi·∫øt ƒë·∫ßu ti√™n c·ªßa b·∫°n</p>
            <button
              className="create-first-btn"
              onClick={() => setShowCreateModal(true)}
            >
              Vi·∫øt b√†i ƒë·∫ßu ti√™n
            </button>
          </div>
        )}
      </div>

      {/* Create Article Modal */}
      {showCreateModal && (
        <div
          className="modal-overlay"
          onClick={() => setShowCreateModal(false)}
        >
          <div className="create-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Vi·∫øt b√†i m·ªõi</h3>
              <button
                className="close-btn"
                onClick={() => setShowCreateModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="modal-content">
              <div className="form-group">
                <label>Ti√™u ƒë·ªÅ b√†i vi·∫øt</label>
                <input
                  type="text"
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                  value={newArticle.title}
                  onChange={(e) =>
                    setNewArticle({ ...newArticle, title: e.target.value })
                  }
                  className="form-input"
                />
              </div>

              <div className="form-group">
                <label>Danh m·ª•c</label>
                <select
                  value={newArticle.category}
                  onChange={(e) =>
                    setNewArticle({ ...newArticle, category: e.target.value })
                  }
                  className="form-select"
                >
                  <option value="">Ch·ªçn danh m·ª•c</option>
                  <option value="K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh">
                    K·∫ø ho·∫°ch h√≥a gia ƒë√¨nh
                  </option>
                  <option value="S·ª©c kh·ªèe sinh s·∫£n">S·ª©c kh·ªèe sinh s·∫£n</option>
                  <option value="Sau sinh">Sau sinh</option>
                  <option value="T∆∞ v·∫•n t√¢m l√Ω">T∆∞ v·∫•n t√¢m l√Ω</option>
                </select>
              </div>

              <div className="form-group">
                <label>T√≥m t·∫Øt</label>
                <textarea
                  placeholder="Vi·∫øt t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ b√†i vi·∫øt..."
                  value={newArticle.excerpt}
                  onChange={(e) =>
                    setNewArticle({ ...newArticle, excerpt: e.target.value })
                  }
                  className="form-textarea short"
                  rows="3"
                />
              </div>

              <div className="form-group">
                <label>N·ªôi dung b√†i vi·∫øt</label>
                <textarea
                  placeholder="Vi·∫øt n·ªôi dung chi ti·∫øt c·ªßa b√†i vi·∫øt..."
                  value={newArticle.content}
                  onChange={(e) =>
                    setNewArticle({ ...newArticle, content: e.target.value })
                  }
                  className="form-textarea"
                  rows="10"
                />
              </div>

              <div className="form-group">
                <label>Tags (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)</label>
                <input
                  type="text"
                  placeholder="tag1, tag2, tag3..."
                  onChange={(e) => {
                    const tags = e.target.value
                      .split(',')
                      .map((tag) => tag.trim())
                      .filter((tag) => tag);
                    setNewArticle({ ...newArticle, tags });
                  }}
                  className="form-input"
                />
              </div>

              <div className="modal-actions">
                <button
                  className="action-btn save"
                  onClick={handleCreateArticle}
                >
                  üíæ L∆∞u b·∫£n nh√°p
                </button>
                <button
                  className="action-btn secondary"
                  onClick={() => setShowCreateModal(false)}
                >
                  H·ªßy
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Article Detail Modal */}
      {showDetailModal && selectedArticle && (
        <div
          className="modal-overlay"
          onClick={() => setShowDetailModal(false)}
        >
          <div className="detail-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Chi ti·∫øt b√†i vi·∫øt</h3>
              <button
                className="close-btn"
                onClick={() => setShowDetailModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="modal-content">
              <div className="article-detail">
                <img
                  src={selectedArticle.image}
                  alt={selectedArticle.title}
                  className="detail-image"
                />

                <div className="detail-meta">
                  <span
                    className="status-badge"
                    style={{
                      backgroundColor: getStatusColor(selectedArticle.status),
                    }}
                  >
                    {getStatusText(selectedArticle.status)}
                  </span>
                  <span className="category">{selectedArticle.category}</span>
                  <span className="reading-time">
                    {selectedArticle.readingTime} ph√∫t ƒë·ªçc
                  </span>
                </div>

                <h1 className="detail-title">{selectedArticle.title}</h1>

                <div className="detail-stats">
                  <span>üëÄ {selectedArticle.views} l∆∞·ª£t xem</span>
                  <span>‚ù§Ô∏è {selectedArticle.likes} l∆∞·ª£t th√≠ch</span>
                  <span>
                    üìÖ {selectedArticle.createdAt.toLocaleDateString('vi-VN')}
                  </span>
                </div>

                <div className="detail-excerpt">
                  <h4>T√≥m t·∫Øt:</h4>
                  <p>{selectedArticle.excerpt}</p>
                </div>

                <div className="detail-content">
                  <h4>N·ªôi dung:</h4>
                  <div className="content-text">{selectedArticle.content}</div>
                </div>

                <div className="detail-tags">
                  <h4>Tags:</h4>
                  <div className="tags-list">
                    {selectedArticle.tags.map((tag, index) => (
                      <span key={index} className="tag">
                        #{tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ConsultantBlog;
