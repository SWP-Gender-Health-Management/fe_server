import React, { useState, useEffect, useRef } from 'react';
import './BlogFormModal.css';

const BlogFormModal = ({ blog, majors, onClose, onSubmit, isEditing }) => {
  const [formData, setFormData] = useState({
    title: '',
    major: '',
    content: '',
    images: [],
  });

  const [imageInput, setImageInput] = useState([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({});
  const [characterCount, setCharacterCount] = useState(0);
  const [previewMode, setPreviewMode] = useState(false);
  const fileInputRef = useRef(null);

  useEffect(() => {
    if (isEditing && blog) {
      setFormData({
        title: blog.title,
        major: blog.major,
        content: blog.content,
        images: [...blog.images],
      });
      setCharacterCount(blog.content.length);
    }
  }, [blog, isEditing]);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (formData.title.length < 10) {
      newErrors.title = 'Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
    } else if (formData.title.length > 200) {
      newErrors.title = 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c qu√° 200 k√Ω t·ª±';
    }

    if (!formData.major) {
      newErrors.major = 'Vui l√≤ng ch·ªçn chuy√™n ng√†nh';
    }

    if (!formData.content.trim()) {
      newErrors.content = 'N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (formData.content.length < 100) {
      newErrors.content = 'N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 100 k√Ω t·ª±';
    } else if (formData.content.length > 10000) {
      newErrors.content = 'N·ªôi dung kh√¥ng ƒë∆∞·ª£c qu√° 10,000 k√Ω t·ª±';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    if (name === 'content') {
      setCharacterCount(value.length);
    }

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: null,
      }));
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];

    const validFiles = files.filter((file) => {
      if (file.size > maxSize) {
        alert(`File ${file.name} qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 5MB.`);
        return false;
      }
      if (!allowedTypes.includes(file.type)) {
        alert(
          `File ${file.name} kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Ch·ªâ ch·∫•p nh·∫≠n JPG, PNG, WEBP.`
        );
        return false;
      }
      return true;
    });

    const newImages = validFiles.map((file) => ({
      type: 'file',
      value: file,
      preview: URL.createObjectURL(file),
      name: file.name,
      size: file.size,
    }));

    setFormData((prev) => ({
      ...prev,
      images: [...prev.images, ...newImages],
    }));

    // Reset input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleRemoveImage = (index) => {
    setFormData((prev) => {
      const imageToRemove = prev.images[index];
      // Revoke URL if it's a file
      if (imageToRemove.type === 'file' && imageToRemove.preview) {
        URL.revokeObjectURL(imageToRemove.preview);
      }

      const updatedImages = prev.images.filter((_, i) => i !== index);
      return { ...prev, images: updatedImages };
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Process images
      const processedImages = formData.images.map((image) => image.value);

      await onSubmit({
        ...formData,
        images: processedImages,
      });
    } catch (error) {
      console.error('Error submitting blog:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u blog. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget && !isSubmitting) {
      onClose();
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getWordCount = (text) => {
    return text.trim().split(/\s+/).length;
  };

  const getReadingTime = (text) => {
    const wordCount = getWordCount(text);
    const readingTime = Math.ceil(wordCount / 200);
    return readingTime;
  };

  return (
    <div className="enhanced-blog-form-backdrop" onClick={handleBackdropClick}>
      <div className="enhanced-blog-form-modal">
        {/* Modal Header */}
        <div className="enhanced-form-header">
          <div className="header-content">
            <div className="form-type-badge">
              <span className="type-icon">{isEditing ? '‚úèÔ∏è' : '‚ûï'}</span>
              <span>{isEditing ? 'Ch·ªânh s·ª≠a blog' : 'T·∫°o blog m·ªõi'}</span>
            </div>
            <div className="header-actions">
              <button
                type="button"
                className="action-btn preview-btn"
                onClick={() => setPreviewMode(!previewMode)}
                disabled={!formData.content.trim()}
              >
                <span className="btn-icon">{previewMode ? '‚úèÔ∏è' : 'üëÅÔ∏è'}</span>
                <span className="btn-text">
                  {previewMode ? 'Ch·ªânh s·ª≠a' : 'Xem tr∆∞·ªõc'}
                </span>
              </button>
              <button
                type="button"
                className="action-btn close-btn"
                onClick={onClose}
                disabled={isSubmitting}
              >
                <span className="btn-icon">‚úï</span>
              </button>
            </div>
          </div>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="enhanced-form-content">
            {!previewMode ? (
              <>
                {/* Basic Information Section */}
                <div className="form-section">
                  <h3 className="section-title">
                    <span className="section-icon">üìã</span>
                    Th√¥ng tin c∆° b·∫£n
                  </h3>

                  <div className="form-row">
                    <div className="form-group">
                      <label htmlFor="title" className="form-label">
                        Ti√™u ƒë·ªÅ blog <span className="required">*</span>
                      </label>
                      <input
                        type="text"
                        id="title"
                        name="title"
                        value={formData.title}
                        onChange={handleInputChange}
                        placeholder="Nh·∫≠p ti√™u ƒë·ªÅ h·∫•p d·∫´n cho blog..."
                        className={`form-input ${errors.title ? 'error' : ''}`}
                        maxLength={200}
                      />
                      <div className="input-meta">
                        <span
                          className={`char-count ${formData.title.length > 180 ? 'warning' : ''}`}
                        >
                          {formData.title.length}/200
                        </span>
                        {errors.title && (
                          <span className="error-text">{errors.title}</span>
                        )}
                      </div>
                    </div>

                    <div className="form-group">
                      <label htmlFor="major" className="form-label">
                        Chuy√™n ng√†nh <span className="required">*</span>
                      </label>
                      <select
                        id="major"
                        name="major"
                        value={formData.major}
                        onChange={handleInputChange}
                        className={`form-select ${errors.major ? 'error' : ''}`}
                      >
                        <option value="">Ch·ªçn chuy√™n ng√†nh ph√π h·ª£p</option>
                        {majors.map((major, index) => (
                          <option key={index} value={major}>
                            {major}
                          </option>
                        ))}
                      </select>
                      {errors.major && (
                        <span className="error-text">{errors.major}</span>
                      )}
                    </div>
                  </div>
                </div>

                {/* Content Section */}
                <div className="form-section">
                  <h3 className="section-title">
                    <span className="section-icon">üìù</span>
                    N·ªôi dung b√†i vi·∫øt
                  </h3>

                  <div className="content-stats">
                    <div className="stat-item">
                      <span className="stat-icon">üìä</span>
                      <span>{characterCount} k√Ω t·ª±</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-icon">üìñ</span>
                      <span>{getWordCount(formData.content)} t·ª´</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-icon">‚è±Ô∏è</span>
                      <span>{getReadingTime(formData.content)} ph√∫t ƒë·ªçc</span>
                    </div>
                  </div>

                  <div className="form-group">
                    <label htmlFor="content" className="form-label">
                      N·ªôi dung chi ti·∫øt <span className="required">*</span>
                    </label>
                    <textarea
                      id="content"
                      name="content"
                      value={formData.content}
                      onChange={handleInputChange}
                      placeholder="Chia s·∫ª ki·∫øn th·ª©c chuy√™n m√¥n c·ªßa b·∫°n m·ªôt c√°ch chi ti·∫øt v√† d·ªÖ hi·ªÉu..."
                      className={`form-textarea ${errors.content ? 'error' : ''}`}
                      rows="15"
                      maxLength={10000}
                    />
                    <div className="input-meta">
                      <span
                        className={`char-count ${characterCount > 9500 ? 'warning' : ''}`}
                      >
                        {characterCount}/10,000
                      </span>
                      {errors.content && (
                        <span className="error-text">{errors.content}</span>
                      )}
                    </div>
                  </div>

                  <div className="content-tips">
                    <h4>üí° G·ª£i √Ω vi·∫øt blog ch·∫•t l∆∞·ª£ng:</h4>
                    <ul>
                      <li>
                        S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, tr√°nh thu·∫≠t ng·ªØ ph·ª©c t·∫°p
                      </li>
                      <li>Cung c·∫•p th√¥ng tin ch√≠nh x√°c, c√≥ cƒÉn c·ª© khoa h·ªçc</li>
                      <li>C·∫•u tr√∫c b√†i vi·∫øt r√µ r√†ng v·ªõi c√°c ƒëo·∫°n ng·∫Øn</li>
                      <li>Tr√°nh ƒë∆∞a ra ch·∫©n ƒëo√°n y khoa c·ª• th·ªÉ</li>
                      <li>Khuy·∫øn kh√≠ch ƒë·ªôc gi·∫£ tham kh·∫£o √Ω ki·∫øn chuy√™n gia</li>
                    </ul>
                  </div>
                </div>

                {/* Images Section */}
                <div className="form-section">
                  <h3 className="section-title">
                    <span className="section-icon">üñºÔ∏è</span>
                    H√¨nh ·∫£nh minh h·ªça
                  </h3>

                  <div className="image-upload-area">
                    <input
                      ref={fileInputRef}
                      type="file"
                      multiple
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="file-input"
                      id="image-upload"
                    />
                    <label htmlFor="image-upload" className="upload-label">
                      <div className="upload-content">
                        <span className="upload-icon">üì∑</span>
                        <span className="upload-text">Ch·ªçn h√¨nh ·∫£nh</span>
                        <span className="upload-subtitle">
                          H·ªó tr·ª£ JPG, PNG, WEBP (t·ªëi ƒëa 5MB)
                        </span>
                      </div>
                    </label>
                  </div>

                  {formData.images.length > 0 && (
                    <div className="images-preview">
                      <h4>H√¨nh ·∫£nh ƒë√£ th√™m ({formData.images.length})</h4>
                      <div className="images-grid">
                        {formData.images.map((image, index) => (
                          <div key={index} className="image-preview-item">
                            <div className="image-wrapper">
                              <img
                                src={
                                  image.type === 'file'
                                    ? image.preview
                                    : image.value
                                }
                                alt={`Preview ${index + 1}`}
                              />
                              <button
                                type="button"
                                onClick={() => handleRemoveImage(index)}
                                className="remove-image-btn"
                              >
                                <span>‚úï</span>
                              </button>
                            </div>
                            {image.type === 'file' && (
                              <div className="image-info">
                                <span className="image-name">{image.name}</span>
                                <span className="image-size">
                                  {formatFileSize(image.size)}
                                </span>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </>
            ) : (
              /* Preview Mode */
              <div className="preview-section">
                <h3 className="section-title">
                  <span className="section-icon">üëÅÔ∏è</span>
                  Xem tr∆∞·ªõc b√†i vi·∫øt
                </h3>

                <div className="preview-container">
                  <div className="preview-header">
                    <h1 className="preview-title">
                      {formData.title || 'Ti√™u ƒë·ªÅ blog'}
                    </h1>
                    <div className="preview-meta">
                      <span className="preview-major">
                        {formData.major || 'Chuy√™n ng√†nh'}
                      </span>
                      <span className="preview-stats">
                        {getWordCount(formData.content)} t·ª´ ‚Ä¢{' '}
                        {getReadingTime(formData.content)} ph√∫t ƒë·ªçc
                      </span>
                    </div>
                  </div>

                  {formData.images.length > 0 && (
                    <div className="preview-images">
                      <img
                        src={
                          formData.images[0].type === 'file'
                            ? formData.images[0].preview
                            : formData.images[0].value
                        }
                        alt="Featured"
                        className="preview-featured-image"
                      />
                    </div>
                  )}

                  <div className="preview-content">
                    {formData.content.split('\n').map(
                      (paragraph, index) =>
                        paragraph.trim() && (
                          <p key={index} className="preview-paragraph">
                            {paragraph}
                          </p>
                        )
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Modal Footer */}
          <div className="enhanced-form-footer">
            <div className="footer-actions">
              <button
                type="button"
                className="footer-btn secondary-btn"
                onClick={onClose}
                disabled={isSubmitting}
              >
                <span className="btn-icon">‚ùå</span>
                <span className="btn-text">H·ªßy b·ªè</span>
              </button>

              <div className="primary-actions">
                <button
                  type="button"
                  className="footer-btn preview-btn"
                  onClick={() => setPreviewMode(!previewMode)}
                  disabled={!formData.content.trim() || isSubmitting}
                >
                  <span className="btn-icon">{previewMode ? '‚úèÔ∏è' : 'üëÅÔ∏è'}</span>
                  <span className="btn-text">
                    {previewMode ? 'Ti·∫øp t·ª•c ch·ªânh s·ª≠a' : 'Xem tr∆∞·ªõc'}
                  </span>
                </button>

                <button
                  type="submit"
                  className="footer-btn primary-btn"
                  disabled={isSubmitting}
                >
                  <span className="btn-icon">
                    {isSubmitting ? '‚è≥' : isEditing ? 'üíæ' : 'üöÄ'}
                  </span>
                  <span className="btn-text">
                    {isSubmitting
                      ? 'ƒêang l∆∞u...'
                      : isEditing
                        ? 'C·∫≠p nh·∫≠t blog'
                        : 'Xu·∫•t b·∫£n blog'}
                  </span>
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default BlogFormModal;
