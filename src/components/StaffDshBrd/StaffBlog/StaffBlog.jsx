import React, { useState } from 'react';
import BlogDetailModal from '../BlogDetail/BlogDetailModal';
import BlogFormModal from '../BlogForm/BlogFormModal';
import './StaffBlog.css';

const StaffBlog = () => {
  const [selectedFilter, setSelectedFilter] = useState('All');
  const [selectedBlog, setSelectedBlog] = useState(null);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isFormModalOpen, setIsFormModalOpen] = useState(false);

  // Mock blog data
  const [blogs, setBlogs] = useState([
    {
      id: 'BLOG001',
      title: 'T·∫ßm quan tr·ªçng c·ªßa x√©t nghi·ªám s·ª©c kh·ªèe sinh s·∫£n ƒë·ªãnh k·ª≥',
      major: 'S·ª©c kh·ªèe sinh s·∫£n',
      content:
        'X√©t nghi·ªám s·ª©c kh·ªèe sinh s·∫£n ƒë·ªãnh k·ª≥ l√† m·ªôt ph·∫ßn quan tr·ªçng trong vi·ªác duy tr√¨ s·ª©c kh·ªèe t·ªïng th·ªÉ. C√°c x√©t nghi·ªám n√†y gi√∫p ph√°t hi·ªán s·ªõm c√°c b·ªánh l√Ω, gi√∫p ƒëi·ªÅu tr·ªã k·ªãp th·ªùi v√† hi·ªáu qu·∫£. Vi·ªác th·ª±c hi·ªán c√°c x√©t nghi·ªám ƒë·ªãnh k·ª≥ gi√∫p ng∆∞·ªùi b·ªánh c√≥ th·ªÉ ph√°t hi·ªán s·ªõm c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe ti·ªÅm ·∫©n.',
      imageList: [
        'https://via.placeholder.com/600x400/667eea/ffffff?text=Health+Check',
        'https://via.placeholder.com/600x400/764ba2/ffffff?text=Medical+Test',
      ],
      status: 'verified',
      createdDate: '2024-01-10',
      updatedDate: '2024-01-10',
    },
    {
      id: 'BLOG002',
      title: 'H∆∞·ªõng d·∫´n chu·∫©n b·ªã tr∆∞·ªõc khi x√©t nghi·ªám hormone',
      major: 'N·ªôi ti·∫øt',
      content:
        'Vi·ªác chu·∫©n b·ªã ƒë√∫ng c√°ch tr∆∞·ªõc khi x√©t nghi·ªám hormone s·∫Ω gi√∫p k·∫øt qu·∫£ ch√≠nh x√°c h∆°n. B√†i vi·∫øt n√†y s·∫Ω h∆∞·ªõng d·∫´n chi ti·∫øt c√°c b∆∞·ªõc chu·∫©n b·ªã c·∫ßn thi·∫øt nh∆∞ nh·ªãn ƒÉn, th·ªùi gian l·∫•y m·∫´u ph√π h·ª£p, v√† nh·ªØng l∆∞u √Ω quan tr·ªçng kh√°c.',
      imageList: [
        'https://via.placeholder.com/600x400/10b981/ffffff?text=Hormone+Test',
      ],
      status: 'unverified',
      createdDate: '2024-01-12',
      updatedDate: '2024-01-12',
    },
    {
      id: 'BLOG003',
      title: 'Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt v·ªÅ x√©t nghi·ªám m√°u t·ªïng qu√°t',
      major: 'Huy·∫øt h·ªçc',
      content:
        'X√©t nghi·ªám m√°u t·ªïng qu√°t l√† m·ªôt trong nh·ªØng x√©t nghi·ªám c∆° b·∫£n nh·∫•t trong y h·ªçc. T√¨m hi·ªÉu v·ªÅ c√°c ch·ªâ s·ªë nh∆∞ h·ªìng c·∫ßu, b·∫°ch c·∫ßu, ti·ªÉu c·∫ßu v√† √Ω nghƒ©a c·ªßa ch√∫ng trong ch·∫©n ƒëo√°n b·ªánh.',
      imageList: [
        'https://via.placeholder.com/600x400/f59e0b/ffffff?text=Blood+Test',
        'https://via.placeholder.com/600x400/ef4444/ffffff?text=Laboratory',
      ],
      status: 'verified',
      createdDate: '2024-01-08',
      updatedDate: '2024-01-08',
    },
  ]);

  // Filter blogs based on selected filter
  const filteredBlogs = blogs.filter((blog) => {
    switch (selectedFilter) {
      case 'Verified':
        return blog.status === 'verified';
      case 'Unverified':
        return blog.status === 'unverified';
      default:
        return true;
    }
  });

  // Get filter counts
  const getFilterCounts = () => {
    const counts = { All: 0, Verified: 0, Unverified: 0 };

    blogs.forEach((blog) => {
      counts.All++;
      if (blog.status === 'verified') counts.Verified++;
      if (blog.status === 'unverified') counts.Unverified++;
    });

    return counts;
  };

  // Handle blog click
  const handleBlogClick = (blog) => {
    setSelectedBlog(blog);
    setIsDetailModalOpen(true);
  };

  // Handle create new blog
  const handleCreateBlog = () => {
    setIsFormModalOpen(true);
  };

  // Handle blog creation
  const handleBlogCreated = (newBlog) => {
    const blogWithId = {
      ...newBlog,
      id: `BLOG${String(blogs.length + 1).padStart(3, '0')}`,
      status: 'unverified',
      createdDate: new Date().toISOString().split('T')[0],
      updatedDate: new Date().toISOString().split('T')[0],
    };

    setBlogs((prev) => [...prev, blogWithId]);
    setIsFormModalOpen(false);
  };

  // Handle blog update
  const handleBlogUpdated = (updatedBlog) => {
    setBlogs((prev) =>
      prev.map((blog) =>
        blog.id === updatedBlog.id
          ? {
              ...updatedBlog,
              status: 'unverified',
              updatedDate: new Date().toISOString().split('T')[0],
            }
          : blog
      )
    );
    setIsDetailModalOpen(false);
    setSelectedBlog(null);
  };

  // Format date for display
  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('vi-VN');
  };

  // Truncate content for preview
  const truncateContent = (content, maxLength = 150) => {
    return content.length > maxLength
      ? content.substring(0, maxLength) + '...'
      : content;
  };

  const filterCounts = getFilterCounts();

  return (
    <div className="staff-blog">
      <div className="staff-page-header">
        <h1 className="staff-page-title">Blog</h1>
        <p className="staff-page-subtitle">
          Qu·∫£n l√Ω b√†i vi·∫øt v√† ki·∫øn th·ª©c chuy√™n m√¥n
        </p>
      </div>

      {/* Header with filters and create button */}
      <div className="blog-header">
        <div className="blog-filters">
          {Object.entries(filterCounts).map(([filter, count]) => (
            <button
              key={filter}
              className={`blog-filter-btn ${selectedFilter === filter ? 'active' : ''}`}
              onClick={() => setSelectedFilter(filter)}
            >
              {filter} ({count})
            </button>
          ))}
        </div>

        <button
          className="staff-btn staff-btn-primary"
          onClick={handleCreateBlog}
        >
          ‚úèÔ∏è Create Blog
        </button>
      </div>

      {/* Blog List */}
      <div className="blog-list">
        {filteredBlogs.length === 0 ? (
          <div className="blog-empty-state">
            <div className="blog-empty-icon">üìù</div>
            <h3>Kh√¥ng c√≥ b√†i vi·∫øt n√†o</h3>
            <p>
              {selectedFilter === 'All'
                ? 'Ch∆∞a c√≥ b√†i vi·∫øt n√†o ƒë∆∞·ª£c t·∫°o. H√£y t·∫°o b√†i vi·∫øt ƒë·∫ßu ti√™n!'
                : `Kh√¥ng c√≥ b√†i vi·∫øt n√†o c√≥ tr·∫°ng th√°i ${selectedFilter.toLowerCase()}.`}
            </p>
          </div>
        ) : (
          <div className="blog-grid">
            {filteredBlogs.map((blog) => (
              <div
                key={blog.id}
                className="blog-card staff-card"
                onClick={() => handleBlogClick(blog)}
              >
                {/* Blog Image */}
                <div className="blog-card-image">
                  {blog.imageList.length > 0 ? (
                    <img src={blog.imageList[0]} alt={blog.title} />
                  ) : (
                    <div className="blog-card-no-image">
                      <span>üìÑ</span>
                    </div>
                  )}
                  <div className={`blog-status-badge ${blog.status}`}>
                    {blog.status === 'verified'
                      ? '‚úÖ Verified'
                      : '‚è≥ Unverified'}
                  </div>
                </div>

                {/* Blog Content */}
                <div className="blog-card-content">
                  <div className="blog-card-header">
                    <h3 className="blog-card-title">{blog.title}</h3>
                    <span className="blog-card-major">{blog.major}</span>
                  </div>

                  <p className="blog-card-preview">
                    {truncateContent(blog.content)}
                  </p>

                  <div className="blog-card-footer">
                    <div className="blog-card-dates">
                      <span>T·∫°o: {formatDate(blog.createdDate)}</span>
                      {blog.updatedDate !== blog.createdDate && (
                        <span>C·∫≠p nh·∫≠t: {formatDate(blog.updatedDate)}</span>
                      )}
                    </div>
                    <div className="blog-card-meta">
                      <span className="blog-card-id">{blog.id}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modals */}
      {isDetailModalOpen && selectedBlog && (
        <BlogDetailModal
          blog={selectedBlog}
          onClose={() => {
            setIsDetailModalOpen(false);
            setSelectedBlog(null);
          }}
          onUpdate={handleBlogUpdated}
        />
      )}

      {isFormModalOpen && (
        <BlogFormModal
          onClose={() => setIsFormModalOpen(false)}
          onCreate={handleBlogCreated}
        />
      )}
    </div>
  );
};

export default StaffBlog;
